import * as Sequelize from 'sequelize';
import { Model, Optional } from 'sequelize';
import type { chat, chatId } from './chat';
import type { post, postId } from './post';
import type { refreshtoken, refreshtokenId } from './refreshtoken';
export interface userAttributes {
    id: number;
    nickname?: string;
    email: string;
    mobile?: string;
    password?: string;
    createdAt?: Date;
    updatedAt?: Date;
    address01?: string;
    address02?: string;
    role: number;
}
export declare type userPk = "id";
export declare type userId = user[userPk];
export declare type userOptionalAttributes = "id" | "nickname" | "mobile" | "password" | "createdAt" | "updatedAt" | "address01" | "address02" | "role";
export declare type userCreationAttributes = Optional<userAttributes, userOptionalAttributes>;
export declare class user extends Model<userAttributes, userCreationAttributes> implements userAttributes {
    id: number;
    nickname?: string;
    email: string;
    mobile?: string;
    password?: string;
    createdAt?: Date;
    updatedAt?: Date;
    address01?: string;
    address02?: string;
    role: number;
    chats: chat[];
    getChats: Sequelize.HasManyGetAssociationsMixin<chat>;
    setChats: Sequelize.HasManySetAssociationsMixin<chat, chatId>;
    addChat: Sequelize.HasManyAddAssociationMixin<chat, chatId>;
    addChats: Sequelize.HasManyAddAssociationsMixin<chat, chatId>;
    createChat: Sequelize.HasManyCreateAssociationMixin<chat>;
    removeChat: Sequelize.HasManyRemoveAssociationMixin<chat, chatId>;
    removeChats: Sequelize.HasManyRemoveAssociationsMixin<chat, chatId>;
    hasChat: Sequelize.HasManyHasAssociationMixin<chat, chatId>;
    hasChats: Sequelize.HasManyHasAssociationsMixin<chat, chatId>;
    countChats: Sequelize.HasManyCountAssociationsMixin;
    posts: post[];
    getPosts: Sequelize.HasManyGetAssociationsMixin<post>;
    setPosts: Sequelize.HasManySetAssociationsMixin<post, postId>;
    addPost: Sequelize.HasManyAddAssociationMixin<post, postId>;
    addPosts: Sequelize.HasManyAddAssociationsMixin<post, postId>;
    createPost: Sequelize.HasManyCreateAssociationMixin<post>;
    removePost: Sequelize.HasManyRemoveAssociationMixin<post, postId>;
    removePosts: Sequelize.HasManyRemoveAssociationsMixin<post, postId>;
    hasPost: Sequelize.HasManyHasAssociationMixin<post, postId>;
    hasPosts: Sequelize.HasManyHasAssociationsMixin<post, postId>;
    countPosts: Sequelize.HasManyCountAssociationsMixin;
    refreshtokens: refreshtoken[];
    getRefreshtokens: Sequelize.HasManyGetAssociationsMixin<refreshtoken>;
    setRefreshtokens: Sequelize.HasManySetAssociationsMixin<refreshtoken, refreshtokenId>;
    addRefreshtoken: Sequelize.HasManyAddAssociationMixin<refreshtoken, refreshtokenId>;
    addRefreshtokens: Sequelize.HasManyAddAssociationsMixin<refreshtoken, refreshtokenId>;
    createRefreshtoken: Sequelize.HasManyCreateAssociationMixin<refreshtoken>;
    removeRefreshtoken: Sequelize.HasManyRemoveAssociationMixin<refreshtoken, refreshtokenId>;
    removeRefreshtokens: Sequelize.HasManyRemoveAssociationsMixin<refreshtoken, refreshtokenId>;
    hasRefreshtoken: Sequelize.HasManyHasAssociationMixin<refreshtoken, refreshtokenId>;
    hasRefreshtokens: Sequelize.HasManyHasAssociationsMixin<refreshtoken, refreshtokenId>;
    countRefreshtokens: Sequelize.HasManyCountAssociationsMixin;
    static initModel(sequelize: Sequelize.Sequelize): typeof user;
}
